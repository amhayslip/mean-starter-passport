<div class="col-sm-8 col-sm-offset-2 lesson">
  <div class="page-header">
    <h2></h2>
    <a href="/#/">Back Home</a>
  </div>

  <div class="topic">
    <h3>Optional Projects</h3>
    <p>These projects are not required, but are suggested!</p>
  </div>

  <hr>

  <div class="topic">
    <h4>Week 1</h4>
    <p class="def"><strong>1. Javascript Tennis Project</strong></p>
    <p>For this challenge, you will be using everything you know in Javascript to create a tennis game. For simplicity sake, we’ll assume that we’re only scoring a single game of tennis – no sets or matches. The rules of tennis are interesting and are as follows:</p>

    <p>1. Each player can have either of these points in one game: 0, 15, 30, 40</p>

    <p>2. If you have 40 and you win the ball you win the game, however there are special rules.</p>

    <p>3. If both have 40, the players are “deuce” and:</p>
    <ul>
      <li>a. If the game is in deuce, the winner of a ball will have “advantage” and game ball (they will win if they score again).</li>
      <li>b. If the player with “advantage” wins the ball, he wins the game</li>
      <li>c. If the player without “advantage” wins they are back at “deuce”.</li>
    </ul>

    <p>To complete this challenge, <a href="https://github.com/amhayslip/tennis-challenge" target="_blank">download this folder</a>. Open the <c>specRunner.html</c> file in your browser. You will see a bunch of failing tests. To make these pass, write code inside your <c>main.js</c> file. You will notice 18 failing tests inside of exerciseSpec.js. Write your code so that all 18 of the tests pass.</p>

    <hr>

    <p class="def"><strong>2. To Do List</strong></p>
    <p>Create a page that has an input field and a submit button. Allow users to enter a to-do inside the input field and add it to the page when they click the button. You may use jQuery for this or the vanilla DOM api.</p>

    <p>As a challenge, add a checkbox to check to-do's as done or not.</p>
  </div>

  <hr>

    <div class="topic">
    <h4>Week 2</h4>
    <p class="def"><strong>1. Todo List, Maxed Out</strong></p>
    <p>They say that you should tackle your hardest task first in the day! Continue with your Todo list from last week (or create one if you haven't already). Add an input for difficulty level so you can estimate how difficult a given task might be (from 1 to 10).</p>

    <p>Persist your data using <a href="https://developer.mozilla.org/en/docs/Web/API/Window/localStorage" target="_blank">Local Storage!</a></p>

    <hr>

    <p class="def"><strong>2. Sorting your Todo's</strong></p>
    <p>Now, let's sort our Todo's by difficulty. First, implement bubble sort. Once you've mastered that, work your way through <a href="http://khan4019.github.io/front-end-Interview-Questions/sort.html#bubbleSort" target="_blank">this list</a> and see how far you can get!</p>

  </div>


  <hr>
</div>