<div class="col-sm-8 col-sm-offset-2 lesson">
  <div class="page-header">
    <h2>Vocabulary</h2>
    <a href="/#/">Back Home</a>
  </div>

  <div class="topic">
    <h4>Week 1</h4>

    <p class="def"><strong>Version Control</strong></p>
    <p>A system that records changes to a file or set of files over time so that you can recall specific versions later.</p>

    <p class="def"><strong>Boilerplate</strong></p>
    <p>Any text that is or can be reused in new contexts or applications without being greatly changed from the original.</p>

    <p class="def"><strong>Type</strong></p>
    <p>In computer science and computer programming, a data type or simply type is a classification identifying one of various types of data, such as string, integer or boolean, that determines the possible values for that type.</p>

    <p class="def"><strong>String Concatenation</strong></p>
    <p>In many programming languages, string concatenation is a binary infix operator. The + (plus) operator is often overloaded to denote concatenation for string arguments: "Hello, " + "World" has the value "Hello, World".</p>

    <p class="def"><strong>Conditional Statment</strong></p>
    <p>An "if/else" statement that determines evaluates code based on a comparative operator.</p> 

    <p class="def"><strong>Comparative Operator</strong></p>
    <p>An operator that compares two operands based on a condition.</p>   

    <p class="def"><strong>Logical Operator</strong></p>
    <p>Logical operators check the "truthiness" or "falsiness" of two values.</p>

    <p class="def"><strong>Block-Level HTML Elements</strong></p>
    <p>Block level elements take up the entire width of their parent elements and begin on a new line.</p>

    <p class="def"><strong>Inline HTML Elements</strong></p>
    <p>Inline elements sit within a block level element and do not start on a new line.</p> 

    <p class="def"><strong>HTML Attributes</strong></p>
    <p>Attributes are additional values that configure the elements or adjust their behavior in various ways to meet the criteria the users want.</p>

    <p class="def"><strong>Stage (a file)</strong></p>
    <p>Staging a file means to prepare it before commiting it.</p>

    <p class="def"><strong>Commit (a file)</strong></p>
    <p>A "commit" is a snapshot of our project. It saves a refernce to what our files looked like at the time of the "commit."</p>

    <p class="def"><strong>Repository (aka repo)</strong></p>
    <p>A data structure where git stores projects (i.e. sets of files). A git repository contains commit objects and references to commit objects which makes tracking work easy.</p>

    <p class="def"><strong>SHA hash</strong></p>
    <p>A standard cryptographic hashing function. SHA stands for Secure Hash Algorithm.</p>    

    <p class="def"><strong>Interpreter</strong></p>
    <p>An interpreter reads instructions (lines of code) one line at a time and translates them to code that can be executed on the underlying machine. </p>    

    <p class="def"><strong>Debug</strong></p>
    <p>Generally you debug code to get rid of bugs (issues). Unless you're a perfect programmer, in which case good job. You use a <strong> debugger </strong> to run through your code and see where it "breaks", i.e. where the bug is.</p>    
    
    <p class="def"><strong>Concatenation</strong></p>
    <p>When you concatenate strings it means you're "bringing them together" into one string.</p>    

    <p class="def"><strong>UI</strong></p>
    <p>UI is a common abbreviation for User Interface: the visual elements a user sees on a page/app/program with which they interact to get things done.</p>

    <p class="def"><strong>UX</strong></p>
    <p>UX is a common abbreviation for User Experience: the individual interactions and overarching journey a user takes when navigating through a page/app/program.</p>        

    <p class="def"><strong>Selectors</strong></p>
    <p>In CSS, a selector is used to target an HTML element in order to customize it (color, positioning, etc.).</p>

    <p class="def"><strong>Specificity</strong></p>
    <p>In CSS, specifity determines which CSS property is most important, and therefore which to apply. For example, if all divs in the document have a blue background, but one div has an ID of "redDiv" and redDiv's background color is set to red, then this specific div will have a red background because its CSS property is more specific.</p>

    <p class="def"><strong>CSS Box Model</strong></p>
    <p>The Box Model represents how an element takes up space on the page. Specifically, the box model looks at the height/width, padding, border, and margin of an element, in that order.</p>

    <p class="def"><strong>Siblings</strong></p>
    <p>Siblings, in HTML, are elements that are of the same hierarchy. For example, if a div element has two paragraph elements in it, those two p's are considered siblings.</p>

    <p class="def"><strong>Loop</strong></p>
    <p>Use loops to execute a series of similar or identical processes without having to write them out one by one.</p>

    <p class="def"><strong>Array</strong></p>
    <p>An array is a list of anything - strings, integers, objects, or a combination. You can even have a list of lists of lists of lists...whoa</p>

    <p class="def"><strong>Indexes and Zero-Based Indexing</strong></p>
    <p>An index refers to the position of an element in an array. In virtually all programming practices, every array starts with 0. The first element in an array, for example, is the 0-th element - this principle is called zero-baed indexing and is important because if you ignore it your code will crash. Trust me.</p>

    <p class="def"><strong>Hard Coding</strong></p>
    <p>This is bad. Don't do it. Hard coding means to code using numbers/strings in their raw form as opposed to using variables. This may seem harmless at first, the best practice is to always use variables - it's safer and more readable.</p>    

    <p class="def"><strong>Media Queries</strong></p>
    <p>CSS commands that are executed based on screen width; useful for different device size compatability</p>

    <p class="def"><strong>return (Javascript)</strong></p>
    <p>Return does two things: 1. it "returns" a value to whatever called the function and, 2. it immediately exits the function it's inside of.</p>

  </div>
</div>
